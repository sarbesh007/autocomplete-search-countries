{"version":3,"sources":["App.module.css","components/SuggestionsBox.module.css","components/CountryInfo.module.css","components/SuggestionsBox.js","components/CountryInfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","regionArray","SuggestionsBox","state","visibleCountries","selectedRegion","this","setState","props","countries","prevProps","length","event","target","value","visibleCountriesByRegion","filter","country","className","styles","container","Autocomplete","id","options","getOptionLabel","option","name","style","width","onChange","e","searchChange","renderInput","params","TextField","label","placeholder","variant","tocenter","FormControl","formControl","InputLabel","Select","labelId","handleChange","MenuItem","map","region","React","Component","CountryInfo","receivedCountry","capital","population","timezones","currencies","index","pad","key","code","symbol","languages","iso639_2","nativeName","App","handleSearchChange","changedCountry","fetch","then","response","json","data","head","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e5f71543.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2Q6r2\",\"head\":\"App_head__T7erY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"SuggestionsBox_formControl__3fv09\",\"tocenter\":\"SuggestionsBox_tocenter__3HxQH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryInfo_container__1gcW-\",\"pad\":\"CountryInfo_pad__2JJVl\"};","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nimport styles from './SuggestionsBox.module.css';\r\n\r\nconst regionArray = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania']\r\n\r\nexport default class SuggestionsBox extends React.Component{\r\n  state = {\r\n    visibleCountries: null,\r\n    selectedRegion: null\r\n  }\r\n  \r\n  componentDidMount() {\r\n    \r\n    this.setState({visibleCountries: this.props.countries})\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if(prevProps.countries.length !== this.props.countries.length) {\r\n      this.setState({visibleCountries: this.props.countries})\r\n    }\r\n  }\r\n\r\n   handleChange(event) {\r\n    this.setState({ selectedRegion: event.target.value });\r\n    if(event.target.value) {\r\n      const visibleCountriesByRegion = this.props.countries.filter(country => {\r\n        return country['region'] === event.target.value\r\n      })\r\n      this.setState({ visibleCountries: visibleCountriesByRegion })\r\n    } else {\r\n      this.setState({ visibleCountries: this.props.countries })\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n    <div className={styles.container}>\r\n      <Autocomplete\r\n        id=\"combo-box-demo\"\r\n        options={this.state.visibleCountries}\r\n        getOptionLabel={(option) => option.name}\r\n        style={{ width: 500 }}\r\n        onChange={(e, value) => { this.props.searchChange(value);}}\r\n        renderInput={(params) => \r\n        <TextField {...params} label=\"Country Selector\" placeholder=\"type a country name for suggestions\" variant=\"outlined\" \r\n        />}  \r\n      />\r\n      <div className={styles.tocenter}>\r\n      <FormControl variant=\"outlined\" className={styles.formControl} >\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">Regions</InputLabel>\r\n        <Select\r\n        placeholder=\"select a region\"\r\n          labelId=\"demo-simple-select-outlined-label\"\r\n          id=\"demo-simple-select-outlined\"\r\n          value={this.state.selectedRegion}\r\n          onChange={(event) => this.handleChange(event)}\r\n          label=\"Select Region\"\r\n        >\r\n          <MenuItem value={null}>\r\n            <em>None</em>\r\n          </MenuItem>\r\n          {regionArray.map(region => (\r\n          <MenuItem value={region}>{region}</MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport styles from './CountryInfo.module.css';\r\n\r\nconst CountryInfo = ({receivedCountry}) => {\r\n  \r\n    return ( \r\n        <div className={styles.container}>\r\n            <h2>Selected country is : {receivedCountry.name}</h2>\r\n            <h3>Capital is : {receivedCountry.capital}</h3>\r\n            <h3>Region is : {receivedCountry.region}</h3>\r\n            <h3>population are : {receivedCountry.population}</h3>\r\n            <h3>TimeZone is : {receivedCountry.timezones}</h3>\r\n            <h3>Currency Details Are :\r\n                {receivedCountry.currencies.map((value, index) => {\r\n                    return <ul className={styles.pad} key={index}>Code :{value.code}, Name: {value.name}, Symbol: {value.symbol} </ul>\r\n                })}\r\n            </h3>\r\n            <h3>Language Details Are :\r\n                {receivedCountry.languages.map((value, index) => {\r\n                    return <ul className={styles.pad} key={index}>language :{value.name}, Abbreviation : {value.iso639_2}, nativeName: {value.nativeName} </ul>\r\n                })}\r\n            </h3>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default CountryInfo;","/* eslint-disable no-undef */\nimport React from 'react';\nimport SuggestionsBox from './components/SuggestionsBox';\nimport CountryInfo from './components/CountryInfo';\n\n\nimport styles from './App.module.css';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = { \n      countries: [],\n      changedCountry: ''\n\n     }\n  }\n\n  componentDidMount () {\n    \n     fetch('https://restcountries.eu/rest/v2/all')\n    .then(response=> response.json())\n    .then(data => {\n      this.setState({countries:data});\n })}\n\n  handleSearchChange = (value) => {\n    \n    this.setState({changedCountry: value})\n  };\n\n  render() { \n    const { countries, changedCountry } = this.state;\n      if(changedCountry && changedCountry.name !== ''){\n        return (\n          <div className={styles.container}>\n          <h1 className={styles.head}>Country details are</h1>\n           <SuggestionsBox countries={countries} searchChange={this.handleSearchChange} /> \n          \n           <CountryInfo receivedCountry={changedCountry} />\n           \n          </div>\n        );\n      }\n      else{\n        return (\n          <div className={styles.container}>\n          <h1 className={styles.head}>Country details website</h1>\n           <SuggestionsBox countries={countries} searchChange={this.handleSearchChange} /> \n          </div>\n        );\n      }\n    \n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}